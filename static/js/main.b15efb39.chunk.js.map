{"version":3,"sources":["components/Login.js","components/temp.js","App.js","serviceWorker.js","index.js"],"names":["Login","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","responseGoogle","setTimeout","props","history","push","inherits","createClass","key","value","react_default","a","createElement","class","index_es","variant","className","google_login","clientId","buttonText","onSuccess","onFailure","cookiePolicy","Component","withRouter","temp","theme","createMuiTheme","overrides","MuiButton","text","backgroundColor","borderRadius","border","color","height","padding","margin","boxShadow","fontFamily","fontWeight","fontSize","MuiBottomNavigation","root","MuiBottomNavigationAction","iconOnly","wrapper","MuiPickers","typography","useNextVariants","h2","App","state","handleChange","event","setState","_this2","styles","react_router_dom","basename","process","react_router","exact","strict","path","render","components_Login","successfulLogin","component","onChange","label","Link","to","icon","BarChart_default","Add_default","AttachMoney_default","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b15efb39.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {withRouter} from 'react-router-dom';\nimport { GoogleLogin } from 'react-google-login';\nimport '@material-ui/core';\nimport './styles/login.css';\nimport {Typography} from '@material-ui/core';\n\nexport class Login extends Component {\n    responseGoogle = () => {\n        setTimeout(() => {\n            this.props.history.push('./dash');\n        }, 2000);\n    }\n    render() {\n        return (\n            <div class=\"login-page\">\n                <Typography variant=\"h2\" className=\"name\">Delivrr</Typography>\n                <div className=\"google-login-btn\">\n                    <GoogleLogin\n                        clientId=\"658977310896-knrl3gka66fldh83dao2rhgbblmd4un9.apps.googleusercontent.com\"\n                        buttonText=\"Login\"\n                        onSuccess={this.responseGoogle}\n                        onFailure={this.responseGoogle}\n                        cookiePolicy={'single_host_origin'}\n                    />\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default withRouter(Login);\n","import React, { Component } from 'react';\n\nexport class temp extends Component {\n    render() {\n        return (\n        <div>\n            \n        </div>\n        )\n    }\n}\n\nexport default temp;","import React, { Component } from 'react';\nimport {BottomNavigation, BottomNavigationAction, MuiThemeProvider, createMuiTheme} from '@material-ui/core';\nimport {HashRouter as Router, Route, Link} from 'react-router-dom';\nimport DashboardIcon from '@material-ui/icons/BarChart';\nimport AddIcon from '@material-ui/icons/Add';\nimport HistoryIcon from '@material-ui/icons/AttachMoney';\nimport Login from './components/Login';\nimport temp from './components/temp';\nimport './App.css';\n\nconst theme = createMuiTheme({\n    overrides: {\n        MuiButton: {\n            text: {\n            backgroundColor: '#77c9d4',\n            borderRadius: 3,\n            border: 0,\n            color: 'white',\n            height: 30,\n            padding: '0 30px',\n            margin: '20px',\n            boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\n            fontFamily: 'Poppins',\n            fontWeight: 700,\n            fontSize: 14\n            },\n        },\n        MuiBottomNavigation: {\n            root: {\n                backgroundColor: '#77c9d4',\n            }\n        },\n        MuiBottomNavigationAction: {\n            root: {\n                color: '#000000',\n            },\n            iconOnly: {\n                color: '#FF0000'\n            },\n            wrapper: {\n                color: '#FFFFFF ',\n            }\n        },\n    },\n    MuiPickers: {\n        root: {\n            backgroundColor: '#77c9d4'\n        },\n    },\n    typography: {\n        useNextVariants: true,\n        h2: {\n            fontFamily: 'Montserrat',\n            color: '#FFFFFF'\n        }\n    }\n});\n\nclass App extends Component {\n    state = {\n        value: 'dash'\n    };\n    handleChange = (event, value) => {\n        this.setState({ value });\n    };\n    render() {\n        return (\n            <MuiThemeProvider theme={theme}>\n                <Router basename={process.env.PUBLIC_URL}>\n                <Route exact strict path='/' render={() => <Login successfulLogin={ this.successfulLogin }/> }/>\n                <Route strict path='/:page' render={() => \n                    <div className=\"page\">\n                        <Route exact path='/dash' component={temp} />\n                        <Route path='/history' component={temp} />\n                        <BottomNavigation value={this.state.value} onChange={this.handleChange} className=\"bottom-nav\">\n                            <BottomNavigationAction\n                                label=\"Dashboard\"\n                                value=\"dash\"\n                                component={Link}\n                                to=\"/dash\"\n                                icon={<DashboardIcon />}\n                            />\n                            <BottomNavigationAction\n                                label=\"Add\"\n                                value=\"add\"\n                                component={Link}\n                                to=\"/add\"\n                                icon={<AddIcon />}\n                            />\n                            <BottomNavigationAction\n                                label=\"Spending\"\n                                value=\"history\"\n                                component={Link}\n                                to=\"/history\"\n                                icon={<HistoryIcon />}\n                            />\n                        </BottomNavigation>\n                    </div>\n                    } />\n                </Router>\n            </MuiThemeProvider>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}